summarise(number_of_genes = n()) %>%
filter(FDR_under0.01 | FDR_under0.05 | FDR_under0.1)
glm_summary %>%
filter(logFC_type %in% c("50vs130", "50vs210", "50vs290")) %>%
filter(log2FC > 0) %>%
filter(FDR < 0.1)
logFC_FDR_plot <- glm_summary %>%
#filter(logFC_type %in% c("130vs50", "210vs50", "290vs50")) %>%
ggplot(aes(x=log2FC, y=-log10(FDR))) +
geom_point(size=0.1) +
facet_grid(logFC_type ~ ., scale="free_y", switch="y") +
theme_bw() +
theme(
plot.margin= unit(c(1, 0, 1, 0), "lines"),
aspect.ratio = 1,
strip.placement = "outside",
strip.switch.pad.grid = unit(1, "cm"),
strip.text = element_text(size=12),
axis.title.y = element_text(size = 14, vjust = -15),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
strip.background = element_blank(),
text = element_text(family = "Arial", color = "black"),
axis.title.x = element_text(size = 14),       # X軸タイトルのフォントサイズ
axis.text.x = element_text(size = 12, color="black"),        # X軸ラベルのフォントサイズ
axis.text.y = element_text(size = 12, color="black"),        # Y軸ラベルのフォントサイズ
legend.title = element_text(size = 13),       # 凡例タイトルのフォントサイズ
legend.text = element_text(size = 11),        # 凡例ラベルのフォントサイズ
plot.title = element_text(size = 16, hjust = 0.5)  # プロットタイトルのフォントサイズと中央寄せ
)
print(logFC_FDR_plot)
ggsave("logFC_FDR_plot.svg", width = 250/72, height = 450/72, plot = logFC_FDR_plot)
ggsave("logFC_FDR_plot.png", width = 250/72, height = 450/72, plot = logFC_FDR_plot)
logFC_FDR_plot_landscape <- glm_summary %>%
ggplot(aes(x=log2FC, y=-log10(FDR))) +
geom_point(size=0.1) +
facet_grid(. ~ logFC_type, scale="free_y", switch="y") +
theme_bw() +
theme(
plot.margin= unit(c(1, 0, 1, 0), "lines"),
aspect.ratio = 1,
strip.placement = "outside",
strip.switch.pad.grid = unit(1, "cm"),
strip.text = element_text(size=12),
#axis.title.y = element_text(size = 14, vjust = 2),
axis.title.y = element_blank(),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
strip.background = element_blank(),
text = element_text(family = "Arial", color = "black"),
axis.title.x = element_text(size = 14),       # X軸タイトルのフォントサイズ
axis.text.x = element_text(size = 12, color="black"),        # X軸ラベルのフォントサイズ
axis.text.y = element_text(size = 12, color="black"),        # Y軸ラベルのフォントサイズ
legend.title = element_text(size = 13),       # 凡例タイトルのフォントサイズ
legend.text = element_text(size = 11),        # 凡例ラベルのフォントサイズ
plot.title = element_text(size = 16, hjust = 10)  # プロットタイトルのフォントサイズと中央寄せ
)
print(logFC_FDR_plot_landscape)
ggsave("logFC_FDR_plot_landscape.svg", width = 450/72, height = 250/72, plot = logFC_FDR_plot_landscape)
ggsave("logFC_FDR_plot_landscape.png", width = 450/72, height = 250/72, plot = logFC_FDR_plot_landscape)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(svglite)
library(ggrepel)
library(ComplexHeatmap)
library(edgeR)
library(circlize)
library(tidyplots)
count_data <- read_csv("../count_numreads_RSEM_GeneName.csv")
# 列名が「S01.genes.results」とかなので、サンプル名（S01など）だけにする
colnames(count_data)[-1] <- str_split_i(colnames(count_data[-1]), pattern = "\\.", i = 1)
meta_data <- read_tsv("../metadata.tsv") %>%
rename(Sample = Sample_ID) %>%
mutate(Pipetting_Speed = as.factor(Pipetting_Speed)) %>%
mutate(Biological_Replicates = as.factor(Biological_Replicates))
head(count_data)
head(meta_data)
count_data %>% ggplot(aes(x=S01)) + geom_histogram() + scale_x_log10()
is_low_count <- apply(count_data[, -1], 1, mean) <= 1
count_data_filterd <- count_data[!is_low_count,]
print(str_c("Before filtering: ", nrow(count_data), " genes"))
print(str_c("After filtering: ", nrow(count_data_filterd), " genes"))
count_data_filterd %>% ggplot(aes(x=S01)) + geom_histogram() + scale_x_log10()
inter_sample_correlation <- cor(count_data_filterd[, -1])
inter_sample_correlation %>% as.vector() %>% summary()
as.data.frame(inter_sample_correlation) %>%
rownames_to_column(var = "RowName") %>%
pivot_longer(cols = -RowName, names_to = "ColumnName", values_to = "Value") %>%
write_csv(file = "inter_sample_correlation.csv")
result_cmdscale <- cmdscale(1 - inter_sample_correlation, eig = TRUE, k = 2)
mds_pos <- tibble(
Sample = rownames(result_cmdscale$points),
xPos = result_cmdscale$points[, 1],
yPos = result_cmdscale$points[, 2]
)
head(mds_pos)
write_csv(mds_pos, file = "mds_positions.csv")
mds_plot <- mds_pos %>%
full_join(meta_data, by=join_by("Sample")) %>%
ggplot(aes(x=xPos, y=yPos, color=Pipetting_Speed, shape = Biological_Replicates)) +
geom_point() +
geom_point(size=3) +
geom_text_repel(aes(label = Sample), show.legend = FALSE) +
scale_color_manual(
values = c(
"#afeeee",
"#00bfff",
"#0000ff",
"#191970"
)
) +
xlab("Coordinate 1") +
ylab("Coordinate 2") +
labs(color="Pipetting\n speed") +
labs(shape="Biological\n replicate") +
theme_bw() +
theme(
theme(plot.margin= unit(c(0, 0, 0, 0), "lines")),
aspect.ratio = 1,
legend.position="bottom",
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
axis.title.y = element_text(size = 14),
strip.background = element_blank(),
text = element_text(family = "Arial", color = "black"),
axis.title.x = element_text(size = 14),       # X軸タイトルのフォントサイズ
axis.text.x = element_text(size = 12, color="black"),        # X軸ラベルのフォントサイズ
axis.text.y = element_text(size = 12, color="black"),        # Y軸ラベルのフォントサイズ
legend.title = element_text(size = 13),       # 凡例タイトルのフォントサイズ
legend.text = element_text(size = 11),        # 凡例ラベルのフォントサイズ
plot.title = element_text(size = 16, hjust = 0.5) # プロットタイトルのフォントサイズと中央寄せ
) +
ggtitle("MDS Plot") +
guides(color = guide_legend(order = 1, nrow = 2),
shape = guide_legend(order = 2, nrow = 2))
print(mds_plot)
ggsave(filename = "mds_plot.svg", width = 470/72, height = 450/72, plot = mds_plot)
print(heatmap)
print(heatmap)
heatmap()
#col_fun <- colorRamp2(c(0, 1), c("blue", "red"))
col_fun <- colorRamp2(c(0.9, 1), c("blue", "red"))
ha <- HeatmapAnnotation(
Speed = meta_data$Pipetting_Speed,
Biorep = meta_data$Biological_Replicates,
annotation_legend_param = list(
Speed = list(title = "Pipetting speed"),
Biorep = list(title = "Biological replicate")
),
annotation_label = list(
Speed = list(title = "Pipetting speed"),
Biorep = list(title = "Biological replicate")
),
col = list(
Speed = c(
"50" = "#afeeee",
"130" = "#00bfff",
"210" = "#0000ff",
"290" = "#191970"
),
Biorep = c(
"1" = "#ffd700",
"2" = "#32cd32",
"3" = "#ffb6c1"
)
)
)
ra <- rowAnnotation(
Speed = meta_data$Pipetting_Speed,
Biorep = meta_data$Biological_Replicates,
annotation_label = list(
Speed = list(title = "Pipetting speed"),
Biorep = list(title = "Biological replicate")
),
col = list(
Speed = c(
"50" = "#afeeee",
"130" = "#00bfff",
"210" = "#0000ff",
"290" = "#191970"
),
Biorep = c(
"1" = "#ffd700",
"2" = "#32cd32",
"3" = "#ffb6c1"
)
),
show_legend = FALSE
)
heatmap <- Heatmap(
inter_sample_correlation,
name = "PCC",
top_annotation = ha,
left_annotation = ra,
width = unit(9, "cm"),
height = unit(9, "cm"),
col = col_fun,
column_title_gp = gpar(fontsize = 14, fontfamily = "Arial"),  # 列タイトルのフォント設定
row_title_gp = gpar(fontsize = 14, fontfamily = "Arial"),     # 行タイトルのフォント設定
column_names_gp = gpar(fontsize = 12, fontfamily = "Arial"),  # 列ラベルのフォント設定
row_names_gp = gpar(fontsize = 12, fontfamily = "Arial"),     # 行ラベルのフォント設定
heatmap_legend_param = list(
title = "PCC",
direction = "horizontal",
title_gp = gpar(fontsize = 11, fontfamily = "Arial"),       # 凡例タイトルのフォント設定
labels_gp = gpar(fontsize = 11, fontfamily = "Arial")       # 凡例ラベルのフォント設定
)
)
print(heatmap)
svg("heatmap.svg", bg = "transparent", width = 15, height = 15)
draw(heatmap,  heatmap_legend_side = "bottom", annotation_legend_side = "bottom", merge_legend=TRUE)
dev.off()
print(heatmap)
draw(heatmap,  heatmap_legend_side = "bottom", annotation_legend_side = "bottom", merge_legend=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(svglite)
library(ggrepel)
library(ComplexHeatmap)
library(edgeR)
library(circlize)
library(tidyplots)
count_data <- read_csv("../count_numreads_RSEM_GeneName.csv")
# 列名が「S01.genes.results」とかなので、サンプル名（S01など）だけにする
colnames(count_data)[-1] <- str_split_i(colnames(count_data[-1]), pattern = "\\.", i = 1)
meta_data <- read_tsv("../metadata.tsv") %>%
rename(Sample = Sample_ID) %>%
mutate(Pipetting_Speed = as.factor(Pipetting_Speed)) %>%
mutate(Biological_Replicates = as.factor(Biological_Replicates))
head(count_data)
head(meta_data)
count_data %>% ggplot(aes(x=S01)) + geom_histogram() + scale_x_log10()
is_low_count <- apply(count_data[, -1], 1, mean) <= 1
count_data_filterd <- count_data[!is_low_count,]
print(str_c("Before filtering: ", nrow(count_data), " genes"))
print(str_c("After filtering: ", nrow(count_data_filterd), " genes"))
count_data_filterd %>% ggplot(aes(x=S01)) + geom_histogram() + scale_x_log10()
inter_sample_correlation <- cor(count_data_filterd[, -1])
inter_sample_correlation %>% as.vector() %>% summary()
as.data.frame(inter_sample_correlation) %>%
rownames_to_column(var = "RowName") %>%
pivot_longer(cols = -RowName, names_to = "ColumnName", values_to = "Value") %>%
write_csv(file = "inter_sample_correlation.csv")
result_cmdscale <- cmdscale(1 - inter_sample_correlation, eig = TRUE, k = 2)
mds_pos <- tibble(
Sample = rownames(result_cmdscale$points),
xPos = result_cmdscale$points[, 1],
yPos = result_cmdscale$points[, 2]
)
head(mds_pos)
write_csv(mds_pos, file = "mds_positions.csv")
mds_plot <- mds_pos %>%
full_join(meta_data, by=join_by("Sample")) %>%
ggplot(aes(x=xPos, y=yPos, color=Pipetting_Speed, shape = Biological_Replicates)) +
geom_point() +
geom_point(size=3) +
geom_text_repel(aes(label = Sample), show.legend = FALSE) +
scale_color_manual(
values = c(
"#afeeee",
"#00bfff",
"#0000ff",
"#191970"
)
) +
xlab("Coordinate 1") +
ylab("Coordinate 2") +
labs(color="Pipetting\n speed") +
labs(shape="Biological\n replicate") +
theme_bw() +
theme(
theme(plot.margin= unit(c(0, 0, 0, 0), "lines")),
aspect.ratio = 1,
legend.position="bottom",
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
axis.title.y = element_text(size = 14),
strip.background = element_blank(),
text = element_text(family = "Arial", color = "black"),
axis.title.x = element_text(size = 14),       # X軸タイトルのフォントサイズ
axis.text.x = element_text(size = 12, color="black"),        # X軸ラベルのフォントサイズ
axis.text.y = element_text(size = 12, color="black"),        # Y軸ラベルのフォントサイズ
legend.title = element_text(size = 13),       # 凡例タイトルのフォントサイズ
legend.text = element_text(size = 11),        # 凡例ラベルのフォントサイズ
plot.title = element_text(size = 16, hjust = 0.5) # プロットタイトルのフォントサイズと中央寄せ
) +
ggtitle("MDS Plot") +
guides(color = guide_legend(order = 1, nrow = 2),
shape = guide_legend(order = 2, nrow = 2))
print(mds_plot)
ggsave(filename = "mds_plot.svg", width = 470/72, height = 450/72, plot = mds_plot)
#col_fun <- colorRamp2(c(0, 1), c("blue", "red"))
col_fun <- colorRamp2(c(0.9, 1), c("blue", "red"))
ha <- HeatmapAnnotation(
Speed = meta_data$Pipetting_Speed,
Biorep = meta_data$Biological_Replicates,
annotation_legend_param = list(
Speed = list(title = "Pipetting speed"),
Biorep = list(title = "Biological replicate")
),
annotation_label = list(
Speed = list(title = "Pipetting speed"),
Biorep = list(title = "Biological replicate")
),
col = list(
Speed = c(
"50" = "#afeeee",
"130" = "#00bfff",
"210" = "#0000ff",
"290" = "#191970"
),
Biorep = c(
"1" = "#ffd700",
"2" = "#32cd32",
"3" = "#ffb6c1"
)
)
)
ra <- rowAnnotation(
Speed = meta_data$Pipetting_Speed,
Biorep = meta_data$Biological_Replicates,
annotation_label = list(
Speed = list(title = "Pipetting speed"),
Biorep = list(title = "Biological replicate")
),
col = list(
Speed = c(
"50" = "#afeeee",
"130" = "#00bfff",
"210" = "#0000ff",
"290" = "#191970"
),
Biorep = c(
"1" = "#ffd700",
"2" = "#32cd32",
"3" = "#ffb6c1"
)
),
show_legend = FALSE
)
heatmap <- Heatmap(
inter_sample_correlation,
name = "PCC",
top_annotation = ha,
left_annotation = ra,
width = unit(9, "cm"),
height = unit(9, "cm"),
col = col_fun,
column_title_gp = gpar(fontsize = 14, fontfamily = "Arial"),  # 列タイトルのフォント設定
row_title_gp = gpar(fontsize = 14, fontfamily = "Arial"),     # 行タイトルのフォント設定
column_names_gp = gpar(fontsize = 12, fontfamily = "Arial"),  # 列ラベルのフォント設定
row_names_gp = gpar(fontsize = 12, fontfamily = "Arial"),     # 行ラベルのフォント設定
heatmap_legend_param = list(
title = "PCC",
direction = "horizontal",
title_gp = gpar(fontsize = 11, fontfamily = "Arial"),       # 凡例タイトルのフォント設定
labels_gp = gpar(fontsize = 11, fontfamily = "Arial")       # 凡例ラベルのフォント設定
)
)
print(heatmap)
svg("heatmap.svg", bg = "transparent", width = 15, height = 15)
draw(heatmap,  heatmap_legend_side = "bottom", annotation_legend_side = "bottom", merge_legend=TRUE)
dev.off()
df_inter_sample_correlation <- inter_sample_correlation %>%
as.table() %>%
as.data.frame()
names(df_inter_sample_correlation) <- c("sample_1", "sample_2", "PCC")
df_inter_sample_correlation <- df_inter_sample_correlation %>% as_tibble() %>% filter(as.character(sample_1) < as.character(sample_2))
is_same_metadata <- function(metadata_source, sample_id_1, sample_id_2, metadata_name) {
record_1 <- metadata_source %>% filter(Sample == sample_id_1)
record_2 <- metadata_source %>% filter(Sample == sample_id_2)
return(record_1[[metadata_name]] == record_2[[metadata_name]])
}
is_same_metadata <- Vectorize(is_same_metadata, vectorize.args = c("sample_id_1", "sample_id_2"))
df_inter_sample_correlation_with_pair_type <- df_inter_sample_correlation %>%
mutate(pair_speed_type = is_same_metadata(meta_data, sample_1, sample_2, "Pipetting_Speed")) %>%
mutate(pair_biorep_type = is_same_metadata(meta_data, sample_1, sample_2, "Biological_Replicates"))
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_speed_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_biorep_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
write_csv(df_inter_sample_correlation_with_pair_type, file = "inter_sample_PCC.csv")
is_different_metadata <- function(metadata_source, sample_id_1, sample_id_2, metadata_name) {
record_1 <- metadata_source %>% filter(Sample == sample_id_1)
record_2 <- metadata_source %>% filter(Sample == sample_id_2)
return(record_1[[metadata_name]] != record_2[[metadata_name]])
}
is_different_metadata <- Vectorize(is_different_metadata, vectorize.args = c("sample_id_1", "sample_id_2"))
df_inter_sample_correlation_with_pair_type <- df_inter_sample_correlation %>%
mutate(pair_speed_type = is_different_metadata(meta_data, sample_1, sample_2, "Pipetting_Speed")) %>%
mutate(pair_biorep_type = is_different_metadata(meta_data, sample_1, sample_2, "Biological_Replicates"))
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_speed_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE, ) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_biorep_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
write_csv(df_inter_sample_correlation_with_pair_type, file = "inter_sample_PCC.csv")
is_same_metadata <- function(metadata_source, sample_id_1, sample_id_2, metadata_name) {
record_1 <- metadata_source %>% filter(Sample == sample_id_1)
record_2 <- metadata_source %>% filter(Sample == sample_id_2)
return(record_1[[metadata_name]] == record_2[[metadata_name]])
}
is_same_metadata <- Vectorize(is_same_metadata, vectorize.args = c("sample_id_1", "sample_id_2"))
df_inter_sample_correlation_with_pair_type <- df_inter_sample_correlation %>%
mutate(pair_speed_type = is_same_metadata(meta_data, sample_1, sample_2, "Pipetting_Speed")) %>%
mutate(pair_biorep_type = is_same_metadata(meta_data, sample_1, sample_2, "Biological_Replicates"))
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_speed_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_biorep_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
write_csv(df_inter_sample_correlation_with_pair_type, file = "inter_sample_PCC.csv")
is_same_metadata <- function(metadata_source, sample_id_1, sample_id_2, metadata_name) {
record_1 <- metadata_source %>% filter(Sample == sample_id_1)
record_2 <- metadata_source %>% filter(Sample == sample_id_2)
return(record_1[[metadata_name]] == record_2[[metadata_name]])
}
is_same_metadata <- Vectorize(is_same_metadata, vectorize.args = c("sample_id_1", "sample_id_2"))
df_inter_sample_correlation_with_pair_type <- df_inter_sample_correlation %>%
mutate(pair_speed_type =if_else(is_same_metadata(meta_data, sample_1, sample_2, "Pipetting_Speed"), "same", "different")) %>%
mutate(pair_biorep_type =if_else(is_same_metadata(meta_data, sample_1, sample_2, "Biological_Replicates"), "same", "different"))
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_speed_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_biorep_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
write_csv(df_inter_sample_correlation_with_pair_type, file = "inter_sample_PCC.csv")
is_same_metadata <- function(metadata_source, sample_id_1, sample_id_2, metadata_name) {
record_1 <- metadata_source %>% filter(Sample == sample_id_1)
record_2 <- metadata_source %>% filter(Sample == sample_id_2)
return(record_1[[metadata_name]] == record_2[[metadata_name]])
}
is_same_metadata <- Vectorize(is_same_metadata, vectorize.args = c("sample_id_1", "sample_id_2"))
df_inter_sample_correlation_with_pair_type <- df_inter_sample_correlation %>%
mutate(pair_speed_type =if_else(is_same_metadata(meta_data, sample_1, sample_2, "Pipetting_Speed"), "same", "different"), pair_speed_type=factor(pair_speed_type, levels=c("same", "different"))) %>%
mutate(pair_biorep_type =if_else(is_same_metadata(meta_data, sample_1, sample_2, "Biological_Replicates"), "same", "different"))
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_speed_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_biorep_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
write_csv(df_inter_sample_correlation_with_pair_type, file = "inter_sample_PCC.csv")
is_same_metadata <- function(metadata_source, sample_id_1, sample_id_2, metadata_name) {
record_1 <- metadata_source %>% filter(Sample == sample_id_1)
record_2 <- metadata_source %>% filter(Sample == sample_id_2)
return(record_1[[metadata_name]] == record_2[[metadata_name]])
}
is_same_metadata <- Vectorize(is_same_metadata, vectorize.args = c("sample_id_1", "sample_id_2"))
df_inter_sample_correlation_with_pair_type <- df_inter_sample_correlation %>%
mutate(pair_speed_type =if_else(is_same_metadata(meta_data, sample_1, sample_2, "Pipetting_Speed"), "same", "different"), pair_speed_type=factor(pair_speed_type, levels=c("same", "different"))) %>%
mutate(pair_biorep_type =if_else(is_same_metadata(meta_data, sample_1, sample_2, "Biological_Replicates"), "same", "different"), pair_biorep_type=factor(pair_biorep_type, levels=c("same", "different")))
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_speed_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_biorep_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
write_csv(df_inter_sample_correlation_with_pair_type, file = "inter_sample_PCC.csv")
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_speed_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
df_inter_sample_correlation_with_pair_type %>%
tidyplot(x=pair_biorep_type, y=PCC) %>%
add_boxplot(show_outliers = FALSE) %>%
add_data_points_beeswarm() %>%
add_test_pvalue(method = "wilcox_test") %>%
print()
